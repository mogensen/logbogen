package actions

import (
	"encoding/base64"
	"fmt"
	"io/ioutil"
	"log"
	"logbogen/models"
	"net/http"

	"github.com/disintegration/imaging"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v5"
	"github.com/gofrs/uuid"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (UsersImage)
// DB Table: Plural (User_images)
// Resource: Plural (UsersImages)
// Path: Plural (/User_images)
// View Template Folder: Plural (/templates/User_images/)

// UsersImagesResource is the resource for the UsersImage model
type UsersImagesResource struct {
	buffalo.Resource
}

// List gets all UsersImages. This function is mapped to the path
// GET /User_images
func (v UsersImagesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	UsersImages := &models.UsersImages{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all UsersImages from the DB
	if err := q.All(UsersImages); err != nil {
		return err
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, UsersImages))
}

// Show gets the data for one UsersImage. This function is mapped to
// the path GET /User_images/{User_image_id}
func (v UsersImagesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty UsersImage
	UsersImage := &models.UsersImage{}

	// To find the UsersImage the parameter User_image_id is used.
	if err := tx.Find(UsersImage, c.Param("User_image_id")); err != nil {
		return c.Error(404, err)
	}
	p, err := base64.StdEncoding.DecodeString(string(UsersImage.ImageData))
	if err != nil {
		http.Error(c.Response(), "internal error", 500)
		return err
	}

	c.Response().Write(p)
	return nil
}

// New renders the form for creating a new UsersImage.
// This function is mapped to the path GET /User_images/new
func (v UsersImagesResource) New(c buffalo.Context) error {

	pID, err := uuid.FromString(c.Param("user_id"))
	if err != nil {
		return err
	}

	pi := &models.UsersImage{
		UserID: pID,
	}

	return c.Render(200, r.Auto(c, pi))
}

// Create adds a UsersImage to the DB. This function is mapped to the
// path POST /User_images
func (v UsersImagesResource) Create(c buffalo.Context) error {
	// Allocate an empty UsersImage
	UsersImage := &models.UsersImage{}

	// Bind UsersImage to the html form elements
	if err := c.Bind(UsersImage); err != nil {
		return err
	}

	if !UsersImage.Image.Valid() {
		return nil
	}

	img, err := imaging.Decode(UsersImage.Image.File)
	if err != nil {
		return err
	}
	dstImageFit := imaging.Fill(img, 300, 300, imaging.Center, imaging.Lanczos)

	err = imaging.Save(dstImageFit, "/tmp/user_image.jpg")
	if err != nil {
		log.Fatalf("failed to save image: %v", err)
	}
	bytes, err := ioutil.ReadFile("/tmp/user_image.jpg")
	if err != nil {
		log.Fatalf("failed to read image: %v", err)
	}
	UsersImage.ImageData = []byte(base64.StdEncoding.EncodeToString(bytes))

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(UsersImage)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, UsersImage))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", T.Translate(c, "UsersImage.created.success"))
	// and redirect to the User show page
	return c.Redirect(302, "/User/"+UsersImage.UserID.String())
}

// Edit renders a edit form for a UsersImage. This function is
// mapped to the path GET /User_images/{User_image_id}/edit
func (v UsersImagesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty UsersImage
	UsersImage := &models.UsersImage{}

	if err := tx.Find(UsersImage, c.Param("User_image_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, UsersImage))
}

// Update changes a UsersImage in the DB. This function is mapped to
// the path PUT /User_images/{User_image_id}
func (v UsersImagesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty UsersImage
	UsersImage := &models.UsersImage{}

	if err := tx.Find(UsersImage, c.Param("User_image_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind UsersImage to the html form elements
	if err := c.Bind(UsersImage); err != nil {
		return err
	}

	img, err := imaging.Decode(UsersImage.Image.File)
	if err != nil {
		return err
	}
	dstImageFit := imaging.Fill(img, 300, 300, imaging.Center, imaging.Lanczos)

	err = imaging.Save(dstImageFit, "/tmp/user_image.jpg")
	if err != nil {
		log.Fatalf("failed to save image: %v", err)
	}
	bytes, err := ioutil.ReadFile("/tmp/user_image.jpg")
	if err != nil {
		log.Fatalf("failed to read image: %v", err)
	}
	UsersImage.ImageData = []byte(base64.StdEncoding.EncodeToString(bytes))

	verrs, err := tx.ValidateAndUpdate(UsersImage)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, UsersImage))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", T.Translate(c, "UsersImage.updated.success"))
	// and redirect to the User_images index page
	return c.Redirect(302, "/User/"+UsersImage.UserID.String())
}

// Destroy deletes a UsersImage from the DB. This function is mapped
// to the path DELETE /User_images/{User_image_id}
func (v UsersImagesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty UsersImage
	UsersImage := &models.UsersImage{}

	// To find the UsersImage the parameter User_image_id is used.
	if err := tx.Find(UsersImage, c.Param("User_image_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(UsersImage); err != nil {
		return err
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", T.Translate(c, "UsersImage.destroyed.success"))
	// Redirect to the User_images index page
	return c.Render(200, r.Auto(c, UsersImage))
}
