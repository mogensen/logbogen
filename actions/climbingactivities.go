package actions

import (
	"errors"
	"fmt"
	"log"
	"logbogen/models"
	"logbogen/services"
	"net/http"
	"time"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v5"
	"github.com/gobuffalo/x/responder"
	"github.com/gofrs/uuid"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Climbingactivity)
// DB Table: Plural (climbingactivities)
// Resource: Plural (Climbingactivities)
// Path: Plural (/climbingactivities)
// View Template Folder: Plural (/templates/climbingactivities/)

// ClimbingactivitiesResource is the resource for the Climbingactivity model
type ClimbingactivitiesResource struct {
	buffalo.Resource
}

// List gets all Climbingactivities. This function is mapped to the path
// GET /climbingactivities
func (v ClimbingactivitiesResource) List(c buffalo.Context) error {

	climbingactivities := &models.Climbingactivities{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := scope(c).Eager("Participants.Image").Eager().Order("Date").PaginateFromParams(c.Params())

	// Retrieve all Climbingactivities from the DB
	if err := q.All(climbingactivities); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// Add the paginator to the context so it can be used in the template.
		c.Set("pagination", q.Paginator)

		c.Set("climbingactivities", climbingactivities)
		return c.Render(http.StatusOK, r.HTML("/climbingactivities/index.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(climbingactivities))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(climbingactivities))
	}).Respond(c)
}

// Show gets the data for one Climbingactivity. This function is mapped to
// the path GET /climbingactivities/{climbingactivity_id}
func (v ClimbingactivitiesResource) Show(c buffalo.Context) error {

	// Allocate an empty Climbingactivity
	climbingactivity := &models.Climbingactivity{}

	// To find the Climbingactivity the parameter climbingactivity_id is used.
	if err := scope(c).Eager("Participants.Image").Eager("Participants.Achievement").Find(climbingactivity, c.Param("climbingactivity_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		c.Set("climbingactivity", climbingactivity)

		return c.Render(http.StatusOK, r.HTML("/climbingactivities/show.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(climbingactivity))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(climbingactivity))
	}).Respond(c)
}

// New renders the form for creating a new Climbingactivity.
// This function is mapped to the path GET /climbingactivities/new
func (v ClimbingactivitiesResource) New(c buffalo.Context) error {
	c.Set("climbingactivity", &models.Climbingactivity{
		Date:         time.Now(),
		Participants: models.Users{},
	})

	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		c.Error(500, errors.New("no transaction found"))
	}

	users := &models.Users{}
	if err := tx.All(users); err != nil {
		return err
	}
	c.Set("users", users)
	c.Set("climbingtypes", models.ClimbingTypes)
	return c.Render(http.StatusOK, r.HTML("/climbingactivities/new.plush.html"))
}

// CloneClimbingActivity renders the form for creating a new Climbingactivity cloned from an existing.
// This function is mapped to the path GET /climbingactivities/{climbingactivity_id}/clone
func CloneClimbingActivity(c buffalo.Context) error {

	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		c.Error(500, errors.New("no transaction found"))
	}

	// Allocate an empty Climbingactivity
	climbingactivity := &models.Climbingactivity{}

	if err := tx.Eager().Find(climbingactivity, c.Param("climbingactivity_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	participants := models.Users{}
	// Add original user as participant
	participants = append(participants, climbingactivity.User)
	// Remove self from participants
	for _, r := range climbingactivity.Participants {
		if r.ID != currentUser(c).ID {
			participants = append(participants, r)
		}
	}

	c.Set("climbingactivity", &models.Climbingactivity{
		Date:         climbingactivity.Date,
		Lat:          climbingactivity.Lat,
		Lng:          climbingactivity.Lng,
		Location:     climbingactivity.Location,
		Type:         climbingactivity.Type,
		OtherType:    climbingactivity.OtherType,
		Comment:      climbingactivity.Comment,
		UserID:       currentUser(c).ID,
		Participants: participants,
	})

	users := &models.Users{}
	if err := tx.All(users); err != nil {
		return err
	}
	c.Set("users", users)
	c.Set("climbingtypes", models.ClimbingTypes)
	return c.Render(http.StatusOK, r.HTML("/climbingactivities/new.plush.html"))
}

// Create adds a Climbingactivity to the DB. This function is mapped to the
// path POST /climbingactivities
func (v ClimbingactivitiesResource) Create(c buffalo.Context) error {
	// Allocate an empty Climbingactivity
	climbingactivity := &models.Climbingactivity{}

	// Bind climbingactivity to the html form elements
	if err := c.Bind(climbingactivity); err != nil {
		return err
	}
	climbingactivity.UserID = currentUser(c).ID
	geo, _ := services.ReverseGeocode(climbingactivity.Lat, climbingactivity.Lng)
	climbingactivity.Location = geo.SimpleDisplayName()

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	users := &models.Users{}
	if err := tx.All(users); err != nil {
		return err
	}
	c.Set("users", users)
	c.Set("climbingtypes", models.ClimbingTypes)

	participants := models.Users{}
	for _, participantID := range c.Request().Form["participants"] {

		cID, err := uuid.FromString(participantID)
		if err != nil {
			return err
		}
		participants = append(participants, models.User{ID: cID})
		fmt.Println(cID)
		fmt.Println(participants)
	}
	climbingactivity.Participants = participants

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(climbingactivity)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the new.html template that the user can
			// correct the input.
			c.Set("climbingactivity", climbingactivity)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("/climbingactivities/new.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "climbingactivity.created.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/climbingactivities/%v", climbingactivity.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.JSON(climbingactivity))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.XML(climbingactivity))
	}).Respond(c)
}

// Edit renders a edit form for a Climbingactivity. This function is
// mapped to the path GET /climbingactivities/{climbingactivity_id}/edit
func (v ClimbingactivitiesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Climbingactivity
	climbingactivity := &models.Climbingactivity{}

	if err := tx.Eager("Participants").Find(climbingactivity, c.Param("climbingactivity_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	users := &models.Users{}
	if err := tx.All(users); err != nil {
		return err
	}
	c.Set("users", users)
	c.Set("climbingtypes", models.ClimbingTypes)
	c.Set("climbingactivity", climbingactivity)
	return c.Render(http.StatusOK, r.HTML("/climbingactivities/edit.plush.html"))
}

// Update changes a Climbingactivity in the DB. This function is mapped to
// the path PUT /climbingactivities/{climbingactivity_id}
func (v ClimbingactivitiesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Climbingactivity
	climbingactivity := &models.Climbingactivity{}

	if err := tx.Eager("Participants").Find(climbingactivity, c.Param("climbingactivity_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind Climbingactivity to the html form elements
	if err := c.Bind(climbingactivity); err != nil {
		return err
	}
	geo, _ := services.ReverseGeocode(climbingactivity.Lat, climbingactivity.Lng)
	climbingactivity.Location = geo.SimpleDisplayName()

	verrs, err := tx.ValidateAndUpdate(climbingactivity)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the edit.html template that the user can
			// correct the input.
			users := &models.Users{}
			if err := tx.All(users); err != nil {
				return err
			}
			c.Set("users", users)

			c.Set("climbingactivity", climbingactivity)
			c.Set("climbingtypes", models.ClimbingTypes)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("/climbingactivities/edit.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	if err := removeAllActivityParticipants(*climbingactivity, tx); err != nil {
		return fmt.Errorf("Failed removing activityParticipants: %v", err)
	}

	for _, participantID := range c.Request().Form["participants"] {

		cID, err := uuid.FromString(participantID)
		if err != nil {
			return err
		}
		ap := &models.ParticipantsClimbingactivity{
			ActivityID:    climbingactivity.ID,
			ParticipantID: cID,
		}
		if err := tx.Create(ap); err != nil {
			return err
		}
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "climbingactivity.updated.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/climbingactivities/%v", climbingactivity.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(climbingactivity))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(climbingactivity))
	}).Respond(c)
}

func removeAllActivityParticipants(activity models.Climbingactivity, tx *pop.Connection) error {

	activityParticipants := &models.ParticipantsClimbingactivities{}

	err := tx.Where("climbingactivity_id = ?", activity.ID).All(activityParticipants)
	if err != nil {
		return err
	}
	log.Println(activityParticipants)

	if err := tx.Destroy(activityParticipants); err != nil {
		return fmt.Errorf("Failed destroying activityParticipant: %v", err)
	}
	return nil
}

// Destroy deletes a Climbingactivity from the DB. This function is mapped
// to the path DELETE /climbingactivities/{climbingactivity_id}
func (v ClimbingactivitiesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Climbingactivity
	climbingactivity := &models.Climbingactivity{}

	// To find the Climbingactivity the parameter climbingactivity_id is used.
	if err := tx.Find(climbingactivity, c.Param("climbingactivity_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(climbingactivity); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a flash message
		c.Flash().Add("success", T.Translate(c, "climbingactivity.destroyed.success"))

		// Redirect to the index page
		return c.Redirect(http.StatusSeeOther, "/climbingactivities")
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(climbingactivity))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(climbingactivity))
	}).Respond(c)
}
